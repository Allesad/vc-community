@using VirtoCommerce.Foundation.AppConfig.Model
@using VirtoCommerce.Web.Client.Extensions.Routing
@model FilterModel[]
    
@{
    var tempValues = new RouteValueDictionary();
    foreach (var key in Request.QueryString.Keys.Cast<string>().Where(key => !tempValues.ContainsKey(key)))
    {
        tempValues.Add(key, Request.QueryString[key]);
    }
}

<aside class="block">
    <span class="title">@("Shop By".Localize())</span>
    <dl>
        @foreach (var group in Model)
        {
            <dt>@group.Name.Localize()</dt>
            <dd>
                @if (group.Name.Equals("Color", StringComparison.InvariantCultureIgnoreCase))
                {
                    <ol>

                        <li>
                            <ul>
                                @foreach (var facet in group.Facets)
                                {
                                    <li style="background: @facet.Name;" class="filter-color-box color-box" title="@facet.Name (@facet.Count)">
                                        <a href="@Url.SetFacet(group.Key, facet.Key)"></a>
                                    </li>
                                }
                                <li class="clearfix" style="background: none;"></li>
                            </ul>
                        </li>
                    </ol>
                }
                else if (group.Name.Equals("Subcategory", StringComparison.InvariantCultureIgnoreCase))
                {
                    <ol>
                        @foreach (var facet in group.Facets)
                        {
                            tempValues[Constants.Category] = facet.Key;
                            <li>
                                <a href="@Url.RouteUrl("Category", tempValues)">@facet.Name</a>
                                <span>(@facet.Count)</span>
                            </li>
                        }
                    </ol>
                }
                else
                {
                    <ol>
                        @foreach (var facet in group.Facets)
                        {
                            <li>
                                <a href="@Url.SetFacet(group.Key, facet.Key)">@facet.Name</a>
                                <span>(@facet.Count)</span>
                            </li>
                        }
                    </ol>
                }
            </dd>
        }
    </dl>
</aside>
