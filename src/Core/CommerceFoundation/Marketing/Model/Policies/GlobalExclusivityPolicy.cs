using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace VirtoCommerce.Foundation.Marketing.Model.Policies
{
	/// <summary>
	/// This policy filters out all other policies if the global policy has been applied.
	/// </summary>
	public class GlobalExclusivityPolicy : IEvaluationPolicy
	{
		#region IEvaluationPolicy Members
        int _Priority = 100;
        /// <summary>
        /// Gets or sets the priority the policies are executed by. The highest priority is ran first.
        /// </summary>
        /// <value>
        /// The priority.
        /// </value>
		public int Priority 
        {
            get
            {
                return _Priority;
            }
            set
            {
                _Priority = value;
            }
        }

        /// <summary>
        /// Filters the promotions.
        /// </summary>
        /// <param name="evaluationContext">The evaluation context.</param>
        /// <param name="records">The records, must be sorted in the order they are applied.</param>
        /// <returns></returns>
		public PromotionRecord[] FilterPromotions(IPromotionEvaluationContext evaluationContext, PromotionRecord[] records)
		{
            // applied global promotion, set to empty at the beginning
            string appliedGlobalPromotionId = String.Empty;
            List<PromotionRecord> appliedRecords = new List<PromotionRecord>();

            foreach (PromotionRecord record in records)
            {
                if (appliedGlobalPromotionId == String.Empty)
                {
                    if (record.Reward.Promotion.ExclusionTypeId == (int)ExclusivityType.Global)
                    {
                        // set promotion id so we can filter all the rest of promotions
                        appliedGlobalPromotionId = record.Reward.Promotion.PromotionId;
                    }

                    appliedRecords.Add(record);
                }
                else // remove the rest of promotion records unless it was generated by the applied global promotion
                {
                    if (record.Reward.Promotion.PromotionId == appliedGlobalPromotionId)
                        appliedRecords.Add(record);
                }
            }

            return appliedRecords.ToArray();
            /*
			var retVal = promotions;

			//Only one global exclusive promotion
			var globalExlusivityPromotion = promotions.FirstOrDefault(x => x.ExclusionTypeId == (int)ExclusivityType.Global);
			if (globalExlusivityPromotion != null)
			{
				retVal = new Promotion[] { globalExlusivityPromotion };
			}

			return retVal;
             * */
		}
		#endregion


        public string Group
        {
            get
            {
                throw new NotImplementedException();
            }
            set
            {
                throw new NotImplementedException();
            }
        }
    }
}
